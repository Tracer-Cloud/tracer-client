name: Rust CI
on:
  push:
    branches:
      - main
      - dev
    paths:
      - "src/**"
      - ".github/workflows/build-and-test.yml"
  pull_request:
    branches:
      - main
      - dev
    paths:
      - "src/**"
      - ".github/workflows/build-and-test.yml"

env:
  CARGO_TERM_COLOR: always # Ensures colored output in GitHub Actions logs

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: tracer_db
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out repository with submodules
        uses: actions/checkout@v4.1.4
        with:
          submodules: recursive # This will fetch all submodules recursively

      - name: Setup Rust toolchain
        run: |
          rustup toolchain install stable --profile minimal
          rustup toolchain install nightly-2025-04-15 --component rust-src
          rustup component add clippy
          rustup component add rustfmt

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ runner.arch }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-cargo-

      - name: Cache system dependencies
        uses: actions/cache@v3
        with:
          path: /var/cache/apt/archives/
          key: ${{ runner.os }}-${{ runner.arch }}-apt-deps-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-apt-deps-

      - name: Install build dependencies
        run: |
          # Only install if not cached
          if ! dpkg -l | grep -q "linux-headers-$(uname -r)"; then
            sudo apt-get update
            sudo apt-get install -y linux-headers-$(uname -r) libbpf-dev clang llvm
          fi

      - name: Check Formatting
        run: cargo fmt -- --check

      - name: Cargo check
        run: cargo check --locked --all-targets

      - name: Lint with Clippy
        run: cargo clippy -- -D warnings

      - name: Run tests
        run: cargo test