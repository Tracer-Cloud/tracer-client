name: Development Release On S3

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - "main"
    paths:
      - "src/**"
      - ".github/workflows/cross-platform-release-and-assets-upload-on-s3.yml"
  push:
    branches:
      - "main"
    paths:
      - "src/**"
      - ".github/workflows/cross-platform-release-and-assets-upload-on-s3.yml"

jobs:
  update-version:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_changed: ${{ steps.version.outputs.changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Generate and update version
        id: version
        run: |

          # Get current date in YYYY.MM.DD format
          DATE=$(date +'%Y.%-m.%-d')
          # Get time in HH.MM format
          TIME=$(date +'%H%M')

          # Get current version from Cargo.toml
          CURRENT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "Current version: $CURRENT_VERSION"

          # Create new development version string
          NEW_VERSION="${DATE}+${TIME}"
          echo "New version: $NEW_VERSION"

          # Update version in Cargo.toml
          sed -i "s/^version = \".*\"/version = \"${NEW_VERSION}\"/" Cargo.toml

          # Check if version actually changed
          if git diff --quiet Cargo.toml; then
            echo "No version changes detected"
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "Version changes detected"
            echo "changed=true" >> $GITHUB_OUTPUT

            # Commit the version change
            git add Cargo.toml
            git commit -m "chore: update version to ${NEW_VERSION} for development build

            Auto-generated version update for S3 development release

            - Previous version: ${CURRENT_VERSION}
            - New version: ${NEW_VERSION}
            - Branch: ${{ github.head_ref || github.ref_name }}"

            git push origin HEAD:${{ github.head_ref || github.ref_name }}
          fi

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

  build-and-release:
    needs: update-version
    permissions: write-all
    strategy:
      matrix:
        include:
          - arch: x86_64
            target: x86_64-unknown-linux-gnu
            runner: ubuntu-22.04
          - arch: aarch64
            target: aarch64-unknown-linux-gnu
            runner: ubuntu-22.04-arm # Native ARM runner
          - arch: macos-arm64
            target: aarch64-apple-darwin
            runner: macos-latest
          - arch: macos-x86_64
            target: x86_64-apple-darwin
            runner: macos-latest

    runs-on: ${{ matrix.runner }}

    steps:
      - name: Check out repository with submodules
        uses: actions/checkout@v4.1.4
        with:
          submodules: recursive # This will fetch all submodules recursively
          fetch-depth: 0 # Fetch all history for versioning
          ref: ${{ github.head_ref || github.ref_name }} # Get the updated branch with new version
    
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install target
        run: rustup target add ${{ matrix.target }}

      - name: Cache Rust dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: cargo-deps-${{ matrix.target }}-stable-v1
          restore-keys: |
            cargo-deps-${{ matrix.target }}-stable-

      - name: Cache build artifacts
        id: cache-build
        uses: actions/cache@v3
        with:
          path: |
            target/
          key: cargo-build-${{ matrix.target }}-stable-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            cargo-build-${{ matrix.target }}-stable-

      - name: Install build dependencies
        run: |
          rustup toolchain install nightly-2025-04-15 --component rust-src

           if [[ "${{ matrix.runner }}" == *"ubuntu"* ]]; then
            # Install necessary eBPF dependencies for Linux
            sudo apt-get update
            sudo apt-get install -y linux-headers-$(uname -r) libbpf-dev clang llvm libelf-dev
          fi

      # Verify submodules are properly loaded
      - name: Verify submodule content
        run: |
          # Find all vmlinux.h files
          vmlinux_files=$(find vendor -name "vmlinux.h")

          # Check if any vmlinux.h files exist
          if [ -z "$vmlinux_files" ]; then
            echo "ERROR: No vmlinux.h files found in vendor directory"
            exit 1
          fi

          # Print out the found vmlinux.h files for debugging
          echo "Found vmlinux.h files:"
          echo "$vmlinux_files"

          # Optional: Check for specific directories or files you expect
          if [ ! -d "vendor/bpftool" ] || [ ! -d "vendor/libbpf" ]; then
            echo "WARNING: Expected vendor subdirectories are missing"
          fi

      - name: Build the binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary for release
        run: |
          mkdir -p release-files/${{ matrix.arch }}
          cp target/${{ matrix.target }}/release/tracer release-files/${{ matrix.arch }}/tracer
          chmod +x release-files/${{ matrix.arch }}/tracer
          tar -czf release-files/tracer-${{ matrix.target }}.tar.gz -C release-files/${{ matrix.arch }} tracer

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Upload to S3
        run: |
          aws s3 cp release-files/tracer-${{ matrix.target }}.tar.gz s3://tracer-releases/tracer-${{ matrix.target }}.tar.gz
          aws s3 cp release-files/tracer-${{ matrix.target }}.tar.gz s3://tracer-releases/${{ github.head_ref || github.ref_name }}/tracer-${{ matrix.target }}.tar.gz

  build-and-release-amazon-linux:
    needs: update-version
    permissions: write-all
    runs-on: ubuntu-latest
    container:
      image: amazonlinux:2023

    steps:
      - name: Install dependencies
        run: |
          yum update -y
          yum groupinstall -y "Development Tools"
          yum  install -y kernel-devel kernel-headers clang llvm libbpf-devel

      - name: Install Rust
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          echo 'source $HOME/.cargo/env' >> ~/.bashrc
          source $HOME/.cargo/env
          rustup target add x86_64-unknown-linux-gnu
          rustup toolchain install nightly-2025-04-15 --component rust-src

      - name: Check out repository with submodules (updated version)
        uses: actions/checkout@v4.1.4
        with:
          submodules: recursive # This will fetch all submodules recursively
          fetch-depth: 0 # Fetch all history for versioning
          ref: ${{ github.head_ref || github.ref_name }} # Get the updated branch with new version

      - name: Configure Git safe directory
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Build the binary
        run: |
          source $HOME/.cargo/env
          cargo build --release

      - name: Prepare binary for release
        run: |
          mkdir -p release-files/amazon-linux
          cp target/release/tracer release-files/amazon-linux/tracer
          chmod +x release-files/amazon-linux/tracer
          tar -czf release-files/tracer-x86_64-amazon-linux-gnu.tar.gz -C release-files/amazon-linux tracer

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Upload to S3
        run: |
          aws s3 cp release-files/tracer-x86_64-amazon-linux-gnu.tar.gz s3://tracer-releases/tracer-x86_64-amazon-linux-gnu.tar.gz
          aws s3 cp release-files/tracer-x86_64-amazon-linux-gnu.tar.gz s3://tracer-releases/${{ github.head_ref || github.ref_name }}/tracer-x86_64-amazon-linux-gnu.tar.gz
