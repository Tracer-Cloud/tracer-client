name: Development Release On S3

on:
  pull_request:
    branches: 
      - "**"

jobs:
  build-and-release:
    permissions: write-all
    strategy:
      matrix:
        include:
          - arch: x86_64
            target: x86_64-unknown-linux-gnu
            runner: ubuntu-22.04
          - arch: aarch64
            target: aarch64-unknown-linux-gnu
            runner: ubuntu-22.04
          - arch: macos-arm64
            target: aarch64-apple-darwin
            runner: macos-latest
          - arch: macos-x86_64
            target: x86_64-apple-darwin
            runner: macos-latest

    runs-on: ${{ matrix.runner }}

    steps:
      - name: Check out repository with submodules
        uses: actions/checkout@v4.1.4
        with:
          submodules: recursive  # This will fetch all submodules recursively
          fetch-depth: 0  # Fetch all history for versioning

      - name: Update version in Cargo.toml
        run: |
          # Get current date in YYYY.MM.DD format
          DATE=$(date +'%Y.%-m.%-d')
          # Get short commit hash
          COMMIT_HASH=$(git rev-parse --short HEAD)
          # Get time in HH.MM format
          TIME=$(date +'%H.%M')
          # Create new version string
          NEW_VERSION="${DATE}+${TIME}.${COMMIT_HASH}"
          # Update version in Cargo.toml (compatible with both macOS and Linux)
          if [[ "${{ matrix.runner }}" == *"macos"* ]]; then
            sed -i '' "s/^version = \".*\"/version = \"${NEW_VERSION}\"/" Cargo.toml
          else
            sed -i "s/^version = \".*\"/version = \"${NEW_VERSION}\"/" Cargo.toml
          fi
          # Print the new version for verification
          echo "Updated version to: ${NEW_VERSION}"

      - name: Install Rust (Multi-Arch)
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install Targets
        run: |
          source "$HOME/.cargo/env"
          rustup target add ${{ matrix.target }}

      - name: Install Nightly Toolchain
        run: |
          source "$HOME/.cargo/env"
          rustup toolchain install nightly-2025-04-15 --component rust-src

      - name: Install Linux Dependencies
        if: matrix.runner == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y linux-headers-$(uname -r) libbpf-dev clang llvm libelf-dev

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}


      - name: Cache Rust dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: cargo-deps-${{ matrix.target }}-stable-v1
          restore-keys: |
            cargo-deps-${{ matrix.target }}-stable-

      - name: Cache build artifacts
        id: cache-build
        uses: actions/cache@v3
        with:
          path: |
            target/
          key: cargo-build-${{ matrix.target }}-stable-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            cargo-build-${{ matrix.target }}-stable-

      # Verify submodules are properly loaded
      - name: Verify submodule content
        run: |
          # Find all vmlinux.h files
          vmlinux_files=$(find vendor -name "vmlinux.h")
          
          # Check if any vmlinux.h files exist
          if [ -z "$vmlinux_files" ]; then
            echo "ERROR: No vmlinux.h files found in vendor directory"
            exit 1
          fi
          
          # Print out the found vmlinux.h files for debugging
          echo "Found vmlinux.h files:"
          echo "$vmlinux_files"
          
          # Optional: Check for specific directories or files you expect
          if [ ! -d "vendor/bpftool" ] || [ ! -d "vendor/libbpf" ]; then
            echo "WARNING: Expected vendor subdirectories are missing"
          fi
  

      - name: Build the binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary for release
        run: |
          mkdir -p release-files/${{ matrix.arch }}
          cp target/${{ matrix.target }}/release/tracer_cli release-files/${{ matrix.arch }}/tracer
          chmod +x release-files/${{ matrix.arch }}/tracer
          tar -czf release-files/tracer-${{ matrix.target }}.tar.gz -C release-files/${{ matrix.arch }} tracer

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Upload to S3
        run: |
          aws s3 cp release-files/tracer-${{ matrix.target }}.tar.gz s3://tracer-releases/tracer-${{ matrix.target }}.tar.gz
          aws s3 cp release-files/tracer-${{ matrix.target }}.tar.gz s3://tracer-releases/${{ github.head_ref || github.ref_name }}/tracer-${{ matrix.target }}.tar.gz

  build-and-release-amazon-linux:
    permissions: write-all
    runs-on: ubuntu-latest
    container:
      image: amazonlinux:2023

    steps:
      - name: Install dependencies
        run: |
          yum update -y
          yum groupinstall -y "Development Tools"
          yum  install -y kernel-devel kernel-headers clang llvm libbpf-devel


      - name: Install Rust
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          echo 'source $HOME/.cargo/env' >> ~/.bashrc
          source $HOME/.cargo/env
          rustup target add x86_64-unknown-linux-gnu
          rustup toolchain install nightly-2025-04-15 --component rust-src

      - name: Check out repository with submodules
        uses: actions/checkout@v4.1.4
        with:
          submodules: recursive  # This will fetch all submodules recursively
          fetch-depth: 0  # Fetch all history for versioning

      - name: Configure Git safe directory
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Update version in Cargo.toml
        run: |
          # Get current date in YYYY.MM.DD format
          DATE=$(date +'%Y.%-m.%-d')
          # Get short commit hash
          COMMIT_HASH=$(git rev-parse --short HEAD)
          # Get time in HH.MM format
          TIME=$(date +'%H.%M')
          # Create new version string
          NEW_VERSION="${DATE}+${TIME}.${COMMIT_HASH}"
          # Update version in Cargo.toml (compatible with both macOS and Linux)
          if [[ "${{ matrix.runner }}" == *"macos"* ]]; then
            sed -i '' "s/^version = \".*\"/version = \"${NEW_VERSION}\"/" Cargo.toml
          else
            sed -i "s/^version = \".*\"/version = \"${NEW_VERSION}\"/" Cargo.toml
          fi
          # Print the new version for verification
          echo "Updated version to: ${NEW_VERSION}"

      - name: Build the binary
        run: |
          source $HOME/.cargo/env
          cargo build --release

      - name: Prepare binary for release
        run: |
          mkdir -p release-files/amazon-linux
          cp target/release/tracer_cli release-files/amazon-linux/tracer
          chmod +x release-files/amazon-linux/tracer
          tar -czf release-files/tracer-x86_64-amazon-linux-gnu.tar.gz -C release-files/amazon-linux tracer

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Upload to S3
        run: |
          aws s3 cp release-files/tracer-x86_64-amazon-linux-gnu.tar.gz s3://tracer-releases/tracer-x86_64-amazon-linux-gnu.tar.gz
          aws s3 cp release-files/tracer-x86_64-amazon-linux-gnu.tar.gz s3://tracer-releases/${{ github.head_ref || github.ref_name }}/tracer-x86_64-amazon-linux-gnu.tar.gz
