name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  build-binaries:
    permissions: write-all
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-22.04
          - target: aarch64-unknown-linux-gnu
            runner: ubuntu-22.04-arm
          - target: x86_64-apple-darwin
            runner: macos-latest
          - target: aarch64-apple-darwin
            runner: macos-latest

    runs-on: ${{ matrix.runner }}
    steps:
      - name: Check out repository with submodules
        uses: actions/checkout@v4.1.4
        with:
          submodules: recursive  # This will fetch all submodules recursively
          fetch-depth: 0  # Fetch all history for versioning

      - name: Update version in Cargo.toml
        run: |
          # Get current date in YYYY.MM.DD format
          DATE=$(date +'%Y.%-m.%-d')

          # Get time in HH.MM format
          TIME=$(date +'%H.%M')

          # Create new version string
          NEW_VERSION="${DATE}+${TIME}"
          
          # Update version in Cargo.toml (compatible with both macOS and Linux)
          if [[ "${{ matrix.runner }}" == *"macos"* ]]; then
            sed -i '' "s/^version = \".*\"/version = \"${NEW_VERSION}\"/" Cargo.toml
          else
            sed -i "s/^version = \".*\"/version = \"${NEW_VERSION}\"/" Cargo.toml
          fi
          
          # Print the new version for verification
          echo "Updated version to: ${NEW_VERSION}"

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install target
        run: rustup target add ${{ matrix.target }}

      - name: Install build dependencies
        run: |
          rustup toolchain install nightly-2025-04-15 --component rust-src
          
          if [[ "${{ matrix.runner }}" == *"ubuntu"* ]]; then
            # Install necessary eBPF dependencies for Linux
            sudo apt-get update
            sudo apt-get install -y linux-headers-$(uname -r) libbpf-dev clang llvm libelf-dev
          fi

      # Verify submodules are properly loaded
      - name: Verify submodule content
        run: |
          # Find all vmlinux.h files
          vmlinux_files=$(find vendor -name "vmlinux.h")
          
          # Check if any vmlinux.h files exist
          if [ -z "$vmlinux_files" ]; then
            echo "ERROR: No vmlinux.h files found in vendor directory"
            exit 1
          fi
          
          # Print out the found vmlinux.h files for debugging
          echo "Found vmlinux.h files:"
          echo "$vmlinux_files"
          
          # Optional: Check for specific directories or files you expect
          if [ ! -d "vendor/bpftool" ] || [ ! -d "vendor/libbpf" ]; then
            echo "WARNING: Expected vendor subdirectories are missing"
          fi

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary for release
        run: |
          mkdir -p release-files/${{ matrix.target }}
          cp target/${{ matrix.target }}/release/tracer release-files/${{ matrix.target }}/tracer
          chmod +x release-files/${{ matrix.target }}/tracer
          tar -czf release-files/tracer-${{ matrix.target }}.tar.gz -C release-files/${{ matrix.target }} tracer

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tracer-${{ matrix.target }}
          path: release-files/tracer-${{ matrix.target }}.tar.gz

  build-amazon-linux:
    permissions: write-all
    runs-on: ubuntu-latest
    container:
      image: amazonlinux:2023

    steps:
      - name: Install dependencies
        run: |
          yum update -y
          yum groupinstall -y "Development Tools"
          yum install -y kernel-devel kernel-headers clang llvm libbpf-devel

      - name: Install Rust
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          echo 'source $HOME/.cargo/env' >> ~/.bashrc
          source $HOME/.cargo/env
          rustup target add x86_64-unknown-linux-gnu
          rustup toolchain install nightly-2025-04-15 --component rust-src

      - name: Check out repository with submodules
        uses: actions/checkout@v4.1.4
        with:
          submodules: recursive  # This will fetch all submodules recursively
          fetch-depth: 0  # Fetch all history for versioning

      - name: Configure Git safe directory
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Update version in Cargo.toml
        run: |
          # Get current date in YYYY.MM.DD format
          DATE=$(date +'%Y.%-m.%-d')
          # Get short commit hash
          COMMIT_HASH=$(git rev-parse --short HEAD)
          # Get time in HH.MM format
          TIME=$(date +'%H.%M')
          # Create new version string
          NEW_VERSION="${DATE}+${TIME}.${COMMIT_HASH}"
          sed -i "s/^version = \".*\"/version = \"${NEW_VERSION}\"/" Cargo.toml
          echo "Updated version to: ${NEW_VERSION}"

      - name: Build the binary
        run: |
          source $HOME/.cargo/env
          cargo build --release

      - name: Prepare binary for release
        run: |
          mkdir -p release-files/amazon-linux
          cp target/release/tracer release-files/amazon-linux/tracer
          chmod +x release-files/amazon-linux/tracer
          tar -czf release-files/tracer-x86_64-amazon-linux-gnu.tar.gz -C release-files/amazon-linux tracer

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tracer-amazon-linux
          path: release-files/tracer-x86_64-amazon-linux-gnu.tar.gz

  create-release:
    needs: [build-binaries, build-amazon-linux]
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"

      - name: Create Release
        id: create_release
        uses: taiki-e/create-gh-release-action@v1.8.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Upload to release
        run: |
          for file in artifacts/*/*.tar.gz; do
            gh release upload ${{ github.ref_name }} "$file" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}