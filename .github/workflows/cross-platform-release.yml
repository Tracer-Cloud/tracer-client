name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  upload-assets:
    permissions: write-all
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-22.04-arm
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4.1.4
        with:
          submodules: recursive  # This will fetch all submodules recursively

      - name: Update version in Cargo.toml
        run: |
          # Get current date in YYYY.MM.DD format
          DATE=$(date +'%Y.%-m.%-d')

          # Get time in HH.MM format
          TIME=$(date +'%H.%M')

          # Create new version string
          NEW_VERSION="${DATE}+${TIME}"
          # Update version in Cargo.toml (compatible with both macOS and Linux)
          if [[ "${{ matrix.runner }}" == *"macos"* ]]; then
            sed -i '' "s/^version = \".*\"/version = \"${NEW_VERSION}\"/" Cargo.toml
          else
            sed -i "s/^version = \".*\"/version = \"${NEW_VERSION}\"/" Cargo.toml
          fi
          # Print the new version for verification
          echo "Updated version to: ${NEW_VERSION}"

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install target
        run: rustup target add ${{ matrix.target }}

      - name: Install build dependencies
        run: |
          rustup toolchain install nightly-2025-04-15 --component rust-src
          
          if [[ "${{ matrix.runner }}" == *"ubuntu"* ]]; then
            # Install necessary eBPF dependencies for Linux
            sudo apt-get update
            sudo apt-get install -y linux-headers-$(uname -r) libbpf-dev clang llvm libelf-dev
          fi

      # Verify submodules are properly loaded
      - name: Verify submodule content
        run: |
          # Find all vmlinux.h files
          vmlinux_files=$(find vendor -name "vmlinux.h")
          
          # Check if any vmlinux.h files exist
          if [ -z "$vmlinux_files" ]; then
            echo "ERROR: No vmlinux.h files found in vendor directory"
            exit 1
          fi
          
          # Print out the found vmlinux.h files for debugging
          echo "Found vmlinux.h files:"
          echo "$vmlinux_files"
          
          # Optional: Check for specific directories or files you expect
          if [ ! -d "vendor/bpftool" ] || [ ! -d "vendor/libbpf" ]; then
            echo "WARNING: Expected vendor subdirectories are missing"
          fi

      - name: Install cross-compilation tools
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
        if: startsWith(matrix.os, 'ubuntu')

      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: tracer
          target: ${{ matrix.target }}
          token: ${{ secrets.GITHUB_TOKEN }}