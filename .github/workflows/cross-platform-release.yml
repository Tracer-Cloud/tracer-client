name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v4.1.4
      - name: Create Release
        id: create_release
        uses: taiki-e/create-gh-release-action@v1.8.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
       
  upload-assets:
    needs: create-release
    permissions: write-all
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-22.04-arm
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest

    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository with submodules
        uses: actions/checkout@v4.1.4
        with:
          submodules: recursive  # This will fetch all submodules recursively
          fetch-depth: 0  # Fetch all history for versioning

      - name: Update version in Cargo.toml
        run: |
          # Get current date in YYYY.MM.DD format
          DATE=$(date +'%Y.%-m.%-d')

          # Get time in HH.MM format
          TIME=$(date +'%H.%M')

          # Create new version string
          NEW_VERSION="${DATE}+${TIME}"
          
          # Update version in Cargo.toml (compatible with both macOS and Linux)
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            sed -i '' "s/^version = \".*\"/version = \"${NEW_VERSION}\"/" Cargo.toml
          else
            sed -i "s/^version = \".*\"/version = \"${NEW_VERSION}\"/" Cargo.toml
          fi
          
          # Print the new version for verification
          echo "Updated version to: ${NEW_VERSION}"

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install target
        run: rustup target add ${{ matrix.target }}

      - name: Install build dependencies
        run: |
          rustup toolchain install nightly-2025-04-15 --component rust-src
          
          if [[ "${{ matrix.runner }}" == *"ubuntu"* ]]; then
            # Install necessary eBPF dependencies for Linux
            sudo apt-get update
            sudo apt-get install -y linux-headers-$(uname -r) libbpf-dev clang llvm libelf-dev
          fi

      # Verify submodules are properly loaded
      - name: Verify submodule content
        run: |
          # Find all vmlinux.h files
          vmlinux_files=$(find vendor -name "vmlinux.h")
          
          # Check if any vmlinux.h files exist
          if [ -z "$vmlinux_files" ]; then
            echo "ERROR: No vmlinux.h files found in vendor directory"
            exit 1
          fi
          
          # Print out the found vmlinux.h files for debugging
          echo "Found vmlinux.h files:"
          echo "$vmlinux_files"
          
          # Optional: Check for specific directories or files you expect
          if [ ! -d "vendor/bpftool" ] || [ ! -d "vendor/libbpf" ]; then
            echo "WARNING: Expected vendor subdirectories are missing"
          fi

      - name: Install cross-compilation tools
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
        if: startsWith(matrix.os, 'ubuntu')

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Install GitHub CLI
        run: |
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            brew install gh
          else
            type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
            && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
            && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
            && sudo apt update \
            && sudo apt install gh -y
          fi

      - name: Upload to release
        run: |
          gh release upload ${{ github.ref_name }} target/${{ matrix.target }}/release/tracer --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}