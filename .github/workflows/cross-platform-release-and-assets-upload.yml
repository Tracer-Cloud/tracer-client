name: Cross Platform Release

on:
  push:
    branches:
      - main

jobs:
  create-tag-and-update-version:
    runs-on: ubuntu-latest
    permissions: write-all
    outputs:
      release_tag: ${{ steps.create_tag.outputs.release_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Create tag
        id: create_tag
        run: |
          # Create tag in the format vyear.month.day.hoursminutesseconds
          RELEASE_TAG="v$(date '+%Y.%m.%d.%H%M%S')"
          echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "Created tag: ${RELEASE_TAG}"

      - name: Update version in Cargo.toml
        run: |
          RELEASE_TAG=${{ steps.create_tag.outputs.release_tag }}
          # Extract date components and remove leading zeros
          YEAR=$(echo ${RELEASE_TAG} | cut -d'v' -f2 | cut -d'.' -f1)
          MONTH=$(echo ${RELEASE_TAG} | cut -d'.' -f2 | sed 's/^0*//')
          DAY=$(echo ${RELEASE_TAG} | cut -d'.' -f3 | sed 's/^0*//')
          TIME=$(echo ${RELEASE_TAG} | cut -d'.' -f4)
          
          # Create SemVer compatible version string (no leading zeros)
          CARGO_VERSION="${YEAR}.${MONTH}.${DAY}+${TIME}"
          
          # Update Cargo.toml with the SemVer compatible version
          sed -i.bak "s/^version = .*/version = \"${CARGO_VERSION}\"/" Cargo.toml
          
          # Update installation script with the original tag
          if [[ "${RELEASE_TAG}" == *"-dev" ]] ; then
            sed -i.bak "s/^TRACER_VERSION_DEVELOP=\".*/TRACER_VERSION_DEVELOP=\"${RELEASE_TAG}\"/" installation-script.sh
          else
            sed -i.bak "s/^TRACER_VERSION=\".*/TRACER_VERSION=\"${RELEASE_TAG}\"/" installation-script.sh
          fi

      - name: Setup Github user
        run: |
          git config --local user.name actions-user
          git config --local user.email "actions@github.com"

      - name: Add files to commit
        run: git add Cargo.toml installation-script.sh

      - name: Commit changes
        run: git commit -m "Update version to ${{ steps.create_tag.outputs.release_tag }}"

      - name: Push changes
        run: git push origin HEAD:main

      - name: Create tag on the commit
        run: |
          git tag ${{ steps.create_tag.outputs.release_tag }}
          git push origin ${{ steps.create_tag.outputs.release_tag }}

  build-and-release:
    needs: create-tag-and-update-version
    permissions: write-all
    strategy:
      matrix:
        include:
          - target: aarch64-apple-darwin
            os: macos-latest
            binary_name: tracer-aarch64-macos
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary_name: tracer-x86_64-linux
          - target: x86_64-apple-darwin
            os: macos-latest
            binary_name: tracer-x86_64-macos
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags
          ref: main  # Use main branch after version update

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install target
        run: rustup target add ${{ matrix.target }}

      - name: Cache Rust dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: cargo-deps-${{ matrix.target }}-stable-v1
          restore-keys: |
            cargo-deps-${{ matrix.target }}-stable-

      - name: Cache build artifacts
        id: cache-build
        uses: actions/cache@v3
        with:
          path: |
            target/
          key: cargo-build-${{ matrix.target }}-stable-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            cargo-build-${{ matrix.target }}-stable-

      - name: Install cross-compilation tools and build for each target
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
        if: startsWith(matrix.os, 'ubuntu')

      - name: Build the binary
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_BUILD_TARGET: ${{ matrix.target }}

      - name: Prepare binary for release
        run: |
          mkdir -p release-files
          # Copy the binary to the release directory
          cp target/${{ matrix.target }}/release/tracer release-files/tracer

          # Make the binary executable
          chmod +x release-files/tracer

          # Create tar.gz file with the desired name and correct file structure
          tar -czf release-files/tracer-${{ matrix.target }}.tar.gz -C release-files tracer

          # Copy Cargo.toml and installation script to release files (only on one job to avoid duplicates)
          if [ "${{ matrix.target }}" = "x86_64-unknown-linux-gnu" ]; then
            cp Cargo.toml release-files/
            cp installation-script.sh release-files/
          fi
      

      - name: Upload to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-tag-and-update-version.outputs.release_tag }}
          files: release-files/*
          name: Release ${{ needs.create-tag-and-update-version.outputs.release_tag }}
          draft: false
          prerelease: false
          generate_release_notes: true
