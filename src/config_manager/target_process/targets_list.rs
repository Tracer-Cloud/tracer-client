use lazy_static::lazy_static;

use crate::config_manager::target_process::target_matching::{CommandContainsStruct, TargetMatch};

use super::Target;

lazy_static! {


pub static ref OPT_CONDA_BIN_EXCEPTIONS : Vec<TargetMatch> = vec![
    TargetMatch::ProcessName("2to3".to_string()),
    TargetMatch::ProcessName("2to3-3.12".to_string()),
    TargetMatch::ProcessName("acountry".to_string()),
    TargetMatch::ProcessName("activate".to_string()),
    TargetMatch::ProcessName("adig".to_string()),
    TargetMatch::ProcessName("aec".to_string()),
    TargetMatch::ProcessName("ahost".to_string()),
    TargetMatch::ProcessName("anaconda-navigator".to_string()),
    TargetMatch::ProcessName("anaconda-project".to_string()),
    TargetMatch::ProcessName("aomdec".to_string()),
    TargetMatch::ProcessName("aomenc".to_string()),
    TargetMatch::ProcessName("archspec".to_string()),
    TargetMatch::ProcessName("assistant".to_string()),
    TargetMatch::ProcessName("automat-visualize".to_string()),
    TargetMatch::ProcessName("autopep8".to_string()),
    TargetMatch::ProcessName("b2".to_string()),
    TargetMatch::ProcessName("balsam".to_string()),
    TargetMatch::ProcessName("binstar".to_string()),
    TargetMatch::ProcessName("bjam".to_string()),
    TargetMatch::ProcessName("black".to_string()),
    TargetMatch::ProcessName("blackd".to_string()),
    TargetMatch::ProcessName("bokeh".to_string()),
    TargetMatch::ProcessName("brotli".to_string()),
    TargetMatch::ProcessName("bsdcat".to_string()),
    TargetMatch::ProcessName("bsdcpio".to_string()),
    TargetMatch::ProcessName("bsdtar".to_string()),
    TargetMatch::ProcessName("bunzip2".to_string()),
    TargetMatch::ProcessName("bzcat".to_string()),
    TargetMatch::ProcessName("bzcmp".to_string()),
    TargetMatch::ProcessName("bzdiff".to_string()),
    TargetMatch::ProcessName("bzegrep".to_string()),
    TargetMatch::ProcessName("bzfgrep".to_string()),
    TargetMatch::ProcessName("bzgrep".to_string()),
    TargetMatch::ProcessName("bzip2".to_string()),
    TargetMatch::ProcessName("bzip2recover".to_string()),
    TargetMatch::ProcessName("bzless".to_string()),
    TargetMatch::ProcessName("bzmore".to_string()),
    TargetMatch::ProcessName("canbusutil".to_string()),
    TargetMatch::ProcessName("cat".to_string()),
    TargetMatch::ProcessName("captoinfo".to_string()),
    TargetMatch::ProcessName("cbrunsli".to_string()),
    TargetMatch::ProcessName("certutil".to_string()),
    TargetMatch::ProcessName("cftp".to_string()),
    TargetMatch::ProcessName("chardetect".to_string()),
    TargetMatch::ProcessName("cjpeg".to_string()),
    TargetMatch::ProcessName("ckeygen".to_string()),
    TargetMatch::ProcessName("clear".to_string()),
    TargetMatch::ProcessName("compile_et".to_string()),
    TargetMatch::ProcessName("conch".to_string()),
    TargetMatch::ProcessName("conda".to_string()),
    TargetMatch::ProcessName("conda2solv".to_string()),
    TargetMatch::ProcessName("conda-build".to_string()),
    TargetMatch::ProcessName("conda-content-trust".to_string()),
    TargetMatch::ProcessName("conda-convert".to_string()),
    TargetMatch::ProcessName("conda-debug".to_string()),
    TargetMatch::ProcessName("conda-develop".to_string()),
    TargetMatch::ProcessName("conda-env".to_string()),
    TargetMatch::ProcessName("conda-inspect".to_string()),
    TargetMatch::ProcessName("conda-metapackage".to_string()),
    TargetMatch::ProcessName("conda-pack".to_string()),
    TargetMatch::ProcessName("conda-render".to_string()),
    TargetMatch::ProcessName("conda-repo".to_string()),
    TargetMatch::ProcessName("conda-server".to_string()),
    TargetMatch::ProcessName("conda-skeleton".to_string()),
    TargetMatch::ProcessName("conda-token".to_string()),
    TargetMatch::ProcessName("cookiecutter".to_string()),
    TargetMatch::ProcessName("cph".to_string()),
    TargetMatch::ProcessName("cpuinfo".to_string()),
    TargetMatch::ProcessName("c_rehash".to_string()),
    TargetMatch::ProcessName("csv-import".to_string()),
    TargetMatch::ProcessName("cups-config".to_string()),
    TargetMatch::ProcessName("curl".to_string()),
    TargetMatch::ProcessName("curl-config".to_string()),
    TargetMatch::ProcessName("curve_keygen".to_string()),
    TargetMatch::ProcessName("dask".to_string()),
    TargetMatch::ProcessName("dask-scheduler".to_string()),
    TargetMatch::ProcessName("dask-ssh".to_string()),
    TargetMatch::ProcessName("dask-worker".to_string()),
    TargetMatch::ProcessName("datashader".to_string()),
    TargetMatch::ProcessName("dav1d".to_string()),
    TargetMatch::ProcessName("dbrunsli".to_string()),
    TargetMatch::ProcessName("dbus-cleanup-sockets".to_string()),
    TargetMatch::ProcessName("dbus-daemon".to_string()),
    TargetMatch::ProcessName("dbus-launch".to_string()),
    TargetMatch::ProcessName("dbus-monitor".to_string()),
    TargetMatch::ProcessName("dbus-run-session".to_string()),
    TargetMatch::ProcessName("dbus-send".to_string()),
    TargetMatch::ProcessName("dbus-test-tool".to_string()),
    TargetMatch::ProcessName("dbus-update-activation-environment".to_string()),
    TargetMatch::ProcessName("dbus-uuidgen".to_string()),
    TargetMatch::ProcessName("deactivate".to_string()),
    TargetMatch::ProcessName("derb".to_string()),
    TargetMatch::ProcessName("designer".to_string()),
    TargetMatch::ProcessName("distro".to_string()),
    TargetMatch::ProcessName("djpeg".to_string()),
    TargetMatch::ProcessName("dltest".to_string()),
    TargetMatch::ProcessName("dmypy".to_string()),
    TargetMatch::ProcessName("dotenv".to_string()),
    TargetMatch::ProcessName("dumpsolv".to_string()),
    TargetMatch::ProcessName("elasticurl".to_string()),
    TargetMatch::ProcessName("elastipubsub".to_string()),
    TargetMatch::ProcessName("epylint".to_string()),
    TargetMatch::ProcessName("f2py".to_string()),
    TargetMatch::ProcessName("fax2ps".to_string()),
    TargetMatch::ProcessName("fax2tiff".to_string()),
    TargetMatch::ProcessName("fc-cache".to_string()),
    TargetMatch::ProcessName("fc-cat".to_string()),
    TargetMatch::ProcessName("fc-conflist".to_string()),
    TargetMatch::ProcessName("fc-list".to_string()),
    TargetMatch::ProcessName("fc-match".to_string()),
    TargetMatch::ProcessName("fc-pattern".to_string()),
    TargetMatch::ProcessName("fc-query".to_string()),
    TargetMatch::ProcessName("fc-scan".to_string()),
    TargetMatch::ProcessName("fc-validate".to_string()),
    TargetMatch::ProcessName("fits2bitmap".to_string()),
    TargetMatch::ProcessName("fitscheck".to_string()),
    TargetMatch::ProcessName("fitscopy".to_string()),
    TargetMatch::ProcessName("fitsdiff".to_string()),
    TargetMatch::ProcessName("fitsheader".to_string()),
    TargetMatch::ProcessName("fitsinfo".to_string()),
    TargetMatch::ProcessName("fixqt4headers.pl".to_string()),
    TargetMatch::ProcessName("fonttools".to_string()),
    TargetMatch::ProcessName("fpack".to_string()),
    TargetMatch::ProcessName("freetype-config".to_string()),
    TargetMatch::ProcessName("funpack".to_string()),
    TargetMatch::ProcessName("gapplication".to_string()),
    TargetMatch::ProcessName("gdbus".to_string()),
    TargetMatch::ProcessName("gdbus-codegen".to_string()),
    TargetMatch::ProcessName("genbrk".to_string()),
    TargetMatch::ProcessName("gencfu".to_string()),
    TargetMatch::ProcessName("gencnval".to_string()),
    TargetMatch::ProcessName("gendict".to_string()),
    TargetMatch::ProcessName("genrb".to_string()),
    TargetMatch::ProcessName("get_gprof".to_string()),
    TargetMatch::ProcessName("get_objgraph".to_string()),
    TargetMatch::ProcessName("gflags_completions.sh".to_string()),
    TargetMatch::ProcessName("gif2h5".to_string()),
    TargetMatch::ProcessName("gif2rgb".to_string()),
    TargetMatch::ProcessName("gifbuild".to_string()),
    TargetMatch::ProcessName("gifclrmp".to_string()),
    TargetMatch::ProcessName("giffix".to_string()),
    TargetMatch::ProcessName("giftext".to_string()),
    TargetMatch::ProcessName("giftool".to_string()),
    TargetMatch::ProcessName("git".to_string()),
    TargetMatch::ProcessName("gio".to_string()),
    TargetMatch::ProcessName("gio-querymodules".to_string()),
    TargetMatch::ProcessName("glib-compile-resources".to_string()),
    TargetMatch::ProcessName("glib-compile-schemas".to_string()),
    TargetMatch::ProcessName("glib-genmarshal".to_string()),
    TargetMatch::ProcessName("glib-gettextize".to_string()),
    TargetMatch::ProcessName("glib-mkenums".to_string()),
    TargetMatch::ProcessName("gobject-query".to_string()),
    TargetMatch::ProcessName("gresource".to_string()),
    TargetMatch::ProcessName("grpc_cpp_plugin".to_string()),
    TargetMatch::ProcessName("grpc_csharp_plugin".to_string()),
    TargetMatch::ProcessName("grpc_node_plugin".to_string()),
    TargetMatch::ProcessName("grpc_objective_c_plugin".to_string()),
    TargetMatch::ProcessName("grpc_php_plugin".to_string()),
    TargetMatch::ProcessName("grpc_python_plugin".to_string()),
    TargetMatch::ProcessName("grpc_ruby_plugin".to_string()),
    TargetMatch::ProcessName("gsettings".to_string()),
    TargetMatch::ProcessName("gss-client".to_string()),
    TargetMatch::ProcessName("gst-device-monitor-1.0".to_string()),
    TargetMatch::ProcessName("gst-discoverer-1.0".to_string()),
    TargetMatch::ProcessName("gst-inspect-1.0".to_string()),
    TargetMatch::ProcessName("gst-launch-1.0".to_string()),
    TargetMatch::ProcessName("gst-play-1.0".to_string()),
    TargetMatch::ProcessName("gst-stats-1.0".to_string()),
    TargetMatch::ProcessName("gst-typefind-1.0".to_string()),
    TargetMatch::ProcessName("gtester".to_string()),
    TargetMatch::ProcessName("gtester-report".to_string()),
    TargetMatch::ProcessName("h52gif".to_string()),
    TargetMatch::ProcessName("h5c++".to_string()),
    TargetMatch::ProcessName("h5cc".to_string()),
    TargetMatch::ProcessName("h5clear".to_string()),
    TargetMatch::ProcessName("h5copy".to_string()),
    TargetMatch::ProcessName("h5debug".to_string()),
    TargetMatch::ProcessName("h5diff".to_string()),
    TargetMatch::ProcessName("h5dump".to_string()),
    TargetMatch::ProcessName("h5fc".to_string()),
    TargetMatch::ProcessName("h5format_convert".to_string()),
    TargetMatch::ProcessName("h5import".to_string()),
    TargetMatch::ProcessName("h5jam".to_string()),
    TargetMatch::ProcessName("h5ls".to_string()),
    TargetMatch::ProcessName("h5mkgrp".to_string()),
    TargetMatch::ProcessName("h5perf_serial".to_string()),
    TargetMatch::ProcessName("h5redeploy".to_string()),
    TargetMatch::ProcessName("h5repack".to_string()),
    TargetMatch::ProcessName("h5repart".to_string()),
    TargetMatch::ProcessName("h5stat".to_string()),
    TargetMatch::ProcessName("h5unjam".to_string()),
    TargetMatch::ProcessName("h5watch".to_string()),
    TargetMatch::ProcessName("holoviews".to_string()),
    TargetMatch::ProcessName("iconv".to_string()),
    TargetMatch::ProcessName("icu-config".to_string()),
    TargetMatch::ProcessName("icuexportdata".to_string()),
    TargetMatch::ProcessName("icuinfo".to_string()),
    TargetMatch::ProcessName("idle3".to_string()),
    TargetMatch::ProcessName("idle3.12".to_string()),
    TargetMatch::ProcessName("imagecodecs".to_string()),
    TargetMatch::ProcessName("imageio_download_bin".to_string()),
    TargetMatch::ProcessName("imageio_remove_bin".to_string()),
    TargetMatch::ProcessName("infocmp".to_string()),
    TargetMatch::ProcessName("infotocap".to_string()),
    TargetMatch::ProcessName("innochecksum".to_string()),
    TargetMatch::ProcessName("installcheck".to_string()),
    TargetMatch::ProcessName("intake".to_string()),
    TargetMatch::ProcessName("intake-server".to_string()),
    TargetMatch::ProcessName("ippeveprinter".to_string()),
    TargetMatch::ProcessName("ipptool".to_string()),
    TargetMatch::ProcessName("isort".to_string()),
    TargetMatch::ProcessName("isort-identify-imports".to_string()),
    TargetMatch::ProcessName("isql".to_string()),
    TargetMatch::ProcessName("isympy".to_string()),
    TargetMatch::ProcessName("iusql".to_string()),
    TargetMatch::ProcessName("jlpm".to_string()),
    TargetMatch::ProcessName("jpegtran".to_string()),
    TargetMatch::ProcessName("jpgicc".to_string()),
    TargetMatch::ProcessName("jp.py".to_string()),
    TargetMatch::ProcessName("jq".to_string()),
    TargetMatch::ProcessName("jsondiff".to_string()),
    TargetMatch::ProcessName("jsonpatch".to_string()),
    TargetMatch::ProcessName("jsonpointer".to_string()),
    TargetMatch::ProcessName("jsonschema".to_string()),
    TargetMatch::ProcessName("jupyter-dejavu".to_string()),
    TargetMatch::ProcessName("jupyter-events".to_string()),
    TargetMatch::ProcessName("jupyter-execute".to_string()),
    TargetMatch::ProcessName("jupyter-kernel".to_string()),
    TargetMatch::ProcessName("jupyter-kernelspec".to_string()),
    TargetMatch::ProcessName("jupyter-lab".to_string()),
    TargetMatch::ProcessName("jupyter-labextension".to_string()),
    TargetMatch::ProcessName("jupyter-labhub".to_string()),
    TargetMatch::ProcessName("jupyter-migrate".to_string()),
    TargetMatch::ProcessName("jupyter-nbconvert".to_string()),
    TargetMatch::ProcessName("jupyter-qtconsole".to_string()),
    TargetMatch::ProcessName("jupyter-run".to_string()),
    TargetMatch::ProcessName("jupyter-troubleshoot".to_string()),
    TargetMatch::ProcessName("jupyter-trust".to_string()),
    TargetMatch::ProcessName("JxrDecApp".to_string()),
    TargetMatch::ProcessName("JxrEncApp".to_string()),
    TargetMatch::ProcessName("k5srvutil".to_string()),
    TargetMatch::ProcessName("kadmin".to_string()),
    TargetMatch::ProcessName("kdestroy".to_string()),
    TargetMatch::ProcessName("keyring".to_string()),
    TargetMatch::ProcessName("kinit".to_string()),
    TargetMatch::ProcessName("klist".to_string()),
    TargetMatch::ProcessName("kpasswd".to_string()),
    TargetMatch::ProcessName("krb5-config".to_string()),
    TargetMatch::ProcessName("ksu".to_string()),
    TargetMatch::ProcessName("kswitch".to_string()),
    TargetMatch::ProcessName("ktutil".to_string()),
    TargetMatch::ProcessName("kvno".to_string()),
    TargetMatch::ProcessName("lconvert".to_string()),
    TargetMatch::ProcessName("libdeflate-gunzip".to_string()),
    TargetMatch::ProcessName("libdeflate-gzip".to_string()),
    TargetMatch::ProcessName("libpng16-config".to_string()),
    TargetMatch::ProcessName("libpng-config".to_string()),
    TargetMatch::ProcessName("linguist".to_string()),
    TargetMatch::ProcessName("linkicc".to_string()),
    TargetMatch::ProcessName("lprodump".to_string()),
    TargetMatch::ProcessName("lrelease".to_string()),
    TargetMatch::ProcessName("lrelease-pro".to_string()),
    TargetMatch::ProcessName("lsm2bin".to_string()),
    TargetMatch::ProcessName("lupdate".to_string()),
    TargetMatch::ProcessName("lupdate-pro".to_string()),
    TargetMatch::ProcessName("lz4".to_string()),
    TargetMatch::ProcessName("lz4c".to_string()),
    TargetMatch::ProcessName("lz4cat".to_string()),
    TargetMatch::ProcessName("lz4_decompress".to_string()),
    TargetMatch::ProcessName("lzcat".to_string()),
    TargetMatch::ProcessName("lzcmp".to_string()),
    TargetMatch::ProcessName("lzdiff".to_string()),
    TargetMatch::ProcessName("lzegrep".to_string()),
    TargetMatch::ProcessName("lzfgrep".to_string()),
    TargetMatch::ProcessName("lzgrep".to_string()),
    TargetMatch::ProcessName("lzless".to_string()),
    TargetMatch::ProcessName("lzma".to_string()),
    TargetMatch::ProcessName("lzmadec".to_string()),
    TargetMatch::ProcessName("lzmainfo".to_string()),
    TargetMatch::ProcessName("lzmore".to_string()),
    TargetMatch::ProcessName("mailmail".to_string()),
    TargetMatch::ProcessName("makeconv".to_string()),
    TargetMatch::ProcessName("mamba-package".to_string()),
    TargetMatch::ProcessName("markdown-it".to_string()),
    TargetMatch::ProcessName("markdown_py".to_string()),
    TargetMatch::ProcessName("matplotlib".to_string()),
    TargetMatch::ProcessName("mergesolv".to_string()),
    TargetMatch::ProcessName("meshdebug".to_string()),
    TargetMatch::ProcessName("mirror_server".to_string()),
    TargetMatch::ProcessName("mirror_server_stop".to_string()),
    TargetMatch::ProcessName("moc".to_string()),
    TargetMatch::ProcessName("myisamchk".to_string()),
    TargetMatch::ProcessName("myisam_ftdump".to_string()),
    TargetMatch::ProcessName("myisamlog".to_string()),
    TargetMatch::ProcessName("myisampack".to_string()),
    TargetMatch::ProcessName("my_print_defaults".to_string()),
    TargetMatch::ProcessName("mypy".to_string()),
    TargetMatch::ProcessName("mypyc".to_string()),
    TargetMatch::ProcessName("mysqladmin".to_string()),
    TargetMatch::ProcessName("mysqlbinlog".to_string()),
    TargetMatch::ProcessName("mysqlcheck".to_string()),
    TargetMatch::ProcessName("mysql_client_test".to_string()),
    TargetMatch::ProcessName("mysql_client_test_embedded".to_string()),
    TargetMatch::ProcessName("mysql_config".to_string()),
    TargetMatch::ProcessName("mysql_config_editor".to_string()),
    TargetMatch::ProcessName("mysqld".to_string()),
    TargetMatch::ProcessName("mysqld_multi".to_string()),
    TargetMatch::ProcessName("mysqld_safe".to_string()),
    TargetMatch::ProcessName("mysqldump".to_string()),
    TargetMatch::ProcessName("mysqldumpslow".to_string()),
    TargetMatch::ProcessName("mysql_embedded".to_string()),
    TargetMatch::ProcessName("mysqlimport".to_string()),
    TargetMatch::ProcessName("mysql_install_db".to_string()),
    TargetMatch::ProcessName("mysql_plugin".to_string()),
    TargetMatch::ProcessName("mysqlpump".to_string()),
    TargetMatch::ProcessName("mysql_secure_installation".to_string()),
    TargetMatch::ProcessName("mysql.server".to_string()),
    TargetMatch::ProcessName("mysqlshow".to_string()),
    TargetMatch::ProcessName("mysqlslap".to_string()),
    TargetMatch::ProcessName("mysql_ssl_rsa_setup".to_string()),
    TargetMatch::ProcessName("mysqltest".to_string()),
    TargetMatch::ProcessName("mysqltest_embedded".to_string()),
    TargetMatch::ProcessName("mysql_tzinfo_to_sql".to_string()),
    TargetMatch::ProcessName("mysql_upgrade".to_string()),
    TargetMatch::ProcessName("mysqlxtest".to_string()),
    TargetMatch::ProcessName("navigator-updater".to_string()),
    TargetMatch::ProcessName("ncursesw6-config".to_string()),
    TargetMatch::ProcessName("nghttp".to_string()),
    TargetMatch::ProcessName("nghttpd".to_string()),
    TargetMatch::ProcessName("nghttpx".to_string()),
    TargetMatch::ProcessName("node".to_string()),
    TargetMatch::ProcessName("normalizer".to_string()),
    TargetMatch::ProcessName("nspr-config".to_string()),
    TargetMatch::ProcessName("nss-config".to_string()),
    TargetMatch::ProcessName("numba".to_string()),
    TargetMatch::ProcessName("odbc_config".to_string()),
    TargetMatch::ProcessName("odbcinst".to_string()),
    TargetMatch::ProcessName("onig-config".to_string()),
    TargetMatch::ProcessName("openssl".to_string()),
    TargetMatch::ProcessName("opj_compress".to_string()),
    TargetMatch::ProcessName("opj_decompress".to_string()),
    TargetMatch::ProcessName("opj_dump".to_string()),
    TargetMatch::ProcessName("orc-contents".to_string()),
    TargetMatch::ProcessName("orc-memory".to_string()),
    TargetMatch::ProcessName("orc-metadata".to_string()),
    TargetMatch::ProcessName("orc-scan".to_string()),
    TargetMatch::ProcessName("orc-statistics".to_string()),
    TargetMatch::ProcessName("pal2rgb".to_string()),
    TargetMatch::ProcessName("panel".to_string()),
    TargetMatch::ProcessName("patch".to_string()),
    TargetMatch::ProcessName("patchelf".to_string()),
    TargetMatch::ProcessName("pcre2-config".to_string()),
    TargetMatch::ProcessName("pcre2grep".to_string()),
    TargetMatch::ProcessName("pcre2_jit_test".to_string()),
    TargetMatch::ProcessName("pcre2posix_test".to_string()),
    TargetMatch::ProcessName("pcre2test".to_string()),
    TargetMatch::ProcessName("perror".to_string()),
    TargetMatch::ProcessName("pg_config".to_string()),
    TargetMatch::ProcessName("pip".to_string()),
    TargetMatch::ProcessName("pip3".to_string()),
    TargetMatch::ProcessName("pixeltool".to_string()),
    TargetMatch::ProcessName("pk12util".to_string()),
    TargetMatch::ProcessName("pkgdata".to_string()),
    TargetMatch::ProcessName("pkginfo".to_string()),
    TargetMatch::ProcessName("pngfix".to_string()),
    TargetMatch::ProcessName("png-fix-itxt".to_string()),
    TargetMatch::ProcessName("ppm2tiff".to_string()),
    TargetMatch::ProcessName("produce_x_platform_fuzz_corpus".to_string()),
    TargetMatch::ProcessName("protoc".to_string()),
    TargetMatch::ProcessName("psicc".to_string()),
    TargetMatch::ProcessName("pt2to3".to_string()),
    TargetMatch::ProcessName("ptdump".to_string()),
    TargetMatch::ProcessName("ptrepack".to_string()),
    TargetMatch::ProcessName("pttree".to_string()),
    TargetMatch::ProcessName("pybabel".to_string()),
    TargetMatch::ProcessName("pycodestyle".to_string()),
    TargetMatch::ProcessName("pyct".to_string()),
    TargetMatch::ProcessName("pydoc".to_string()),
    TargetMatch::ProcessName("pydoc3".to_string()),
    TargetMatch::ProcessName("pydoc3.12".to_string()),
    TargetMatch::ProcessName("pydocstyle".to_string()),
    TargetMatch::ProcessName("pyflakes".to_string()),
    TargetMatch::ProcessName("pyftmerge".to_string()),
    TargetMatch::ProcessName("pyftsubset".to_string()),
    TargetMatch::ProcessName("pyhtmlizer".to_string()),
    TargetMatch::ProcessName("pyjson5".to_string()),
    TargetMatch::ProcessName("pylint".to_string()),
    TargetMatch::ProcessName("pylint-config".to_string()),
    TargetMatch::ProcessName("pylsp".to_string()),
    TargetMatch::ProcessName("pylupdate5".to_string()),
    TargetMatch::ProcessName("pyrcc5".to_string()),
    TargetMatch::ProcessName("pyreverse".to_string()),
    TargetMatch::ProcessName("pysemver".to_string()),
    TargetMatch::ProcessName("py.test".to_string()),
    TargetMatch::ProcessName("pytest".to_string()),
    TargetMatch::ProcessName("python".to_string()),
    TargetMatch::ProcessName("python3.12-config".to_string()),
    TargetMatch::ProcessName("python3-config".to_string()),
    TargetMatch::ProcessName("pyuic5".to_string()),
    TargetMatch::ProcessName("qcollectiongenerator".to_string()),
    TargetMatch::ProcessName("qdarkstyle".to_string()),
    TargetMatch::ProcessName("qdarkstyle.example".to_string()),
    TargetMatch::ProcessName("qdarkstyle.utils".to_string()),
    TargetMatch::ProcessName("qdbus".to_string()),
    TargetMatch::ProcessName("qdbuscpp2xml".to_string()),
    TargetMatch::ProcessName("qdbusviewer".to_string()),
    TargetMatch::ProcessName("qdbusxml2cpp".to_string()),
    TargetMatch::ProcessName("qdistancefieldgenerator".to_string()),
    TargetMatch::ProcessName("qdoc".to_string()),
    TargetMatch::ProcessName("qgltf".to_string()),
    TargetMatch::ProcessName("qhelpgenerator".to_string()),
    TargetMatch::ProcessName("qlalr".to_string()),
    TargetMatch::ProcessName("qmake".to_string()),
    TargetMatch::ProcessName("qml".to_string()),
    TargetMatch::ProcessName("qmlcachegen".to_string()),
    TargetMatch::ProcessName("qmleasing".to_string()),
    TargetMatch::ProcessName("qmlformat".to_string()),
    TargetMatch::ProcessName("qmlimportscanner".to_string()),
    TargetMatch::ProcessName("qmllint".to_string()),
    TargetMatch::ProcessName("qmlmin".to_string()),
    TargetMatch::ProcessName("qmlplugindump".to_string()),
    TargetMatch::ProcessName("qmlpreview".to_string()),
    TargetMatch::ProcessName("qmlprofiler".to_string()),
    TargetMatch::ProcessName("qmlscene".to_string()),
    TargetMatch::ProcessName("qmltestrunner".to_string()),
    TargetMatch::ProcessName("qmltyperegistrar".to_string()),
    TargetMatch::ProcessName("qscxmlc".to_string()),
    TargetMatch::ProcessName("qta-browser".to_string()),
    TargetMatch::ProcessName("qtattributionsscanner".to_string()),
    TargetMatch::ProcessName("qt.conf".to_string()),
    TargetMatch::ProcessName("qtdiag".to_string()),
    TargetMatch::ProcessName("qtpaths".to_string()),
    TargetMatch::ProcessName("qtplugininfo".to_string()),
    TargetMatch::ProcessName("qtpy".to_string()),
    TargetMatch::ProcessName("qvkgen".to_string()),
    TargetMatch::ProcessName("qwebengine_convert_dict".to_string()),
    TargetMatch::ProcessName("raw2tiff".to_string()),
    TargetMatch::ProcessName("rcc".to_string()),
    TargetMatch::ProcessName("rdjpgcom".to_string()),
    TargetMatch::ProcessName("repc".to_string()),
    TargetMatch::ProcessName("replace".to_string()),
    TargetMatch::ProcessName("repo2solv".to_string()),
    TargetMatch::ProcessName("reset".to_string()),
    TargetMatch::ProcessName("resolveip".to_string()),
    TargetMatch::ProcessName("resolve_stack_dump".to_string()),
    TargetMatch::ProcessName("rst2html4.py".to_string()),
    TargetMatch::ProcessName("rst2html5.py".to_string()),
    TargetMatch::ProcessName("rst2html.py".to_string()),
    TargetMatch::ProcessName("rst2latex.py".to_string()),
    TargetMatch::ProcessName("rst2man.py".to_string()),
    TargetMatch::ProcessName("rst2odt_prepstyles.py".to_string()),
    TargetMatch::ProcessName("rst2odt.py".to_string()),
    TargetMatch::ProcessName("rst2pseudoxml.py".to_string()),
    TargetMatch::ProcessName("rst2s5.py".to_string()),
    TargetMatch::ProcessName("rst2xetex.py".to_string()),
    TargetMatch::ProcessName("rst2xml.py".to_string()),
    TargetMatch::ProcessName("rstpep2html.py".to_string()),
    TargetMatch::ProcessName("run_x_platform_fuzz_corpus".to_string()),
    TargetMatch::ProcessName("samp_hub".to_string()),
    TargetMatch::ProcessName("sclient".to_string()),
    TargetMatch::ProcessName("scrapy".to_string()),
    TargetMatch::ProcessName("send2trash".to_string()),
    TargetMatch::ProcessName("sha256_profile".to_string()),
    TargetMatch::ProcessName("showtable".to_string()),
    TargetMatch::ProcessName("sim_client".to_string()),
    TargetMatch::ProcessName("sip-build".to_string()),
    TargetMatch::ProcessName("sip-distinfo".to_string()),
    TargetMatch::ProcessName("sip-install".to_string()),
    TargetMatch::ProcessName("sip-module".to_string()),
    TargetMatch::ProcessName("sip-sdist".to_string()),
    TargetMatch::ProcessName("sip-wheel".to_string()),
    TargetMatch::ProcessName("skivi".to_string()),
    TargetMatch::ProcessName("sleep".to_string()),
    TargetMatch::ProcessName("slencheck".to_string()),
    TargetMatch::ProcessName("slugify".to_string()),
    TargetMatch::ProcessName("smem".to_string()),
    TargetMatch::ProcessName("sphinx-apidoc".to_string()),
    TargetMatch::ProcessName("sphinx-autogen".to_string()),
    TargetMatch::ProcessName("sphinx-build".to_string()),
    TargetMatch::ProcessName("sphinx-quickstart".to_string()),
    TargetMatch::ProcessName("spyder".to_string()),
    TargetMatch::ProcessName("sqlite3_analyzer".to_string()),
    TargetMatch::ProcessName("streamlit".to_string()),
    TargetMatch::ProcessName("streamlit.cmd".to_string()),
    TargetMatch::ProcessName("stubgen".to_string()),
    TargetMatch::ProcessName("stubtest".to_string()),
    TargetMatch::ProcessName("symilar".to_string()),
    TargetMatch::ProcessName("syncqt.pl".to_string()),
    TargetMatch::ProcessName("tabs".to_string()),
    TargetMatch::ProcessName("tabulate".to_string()),
    TargetMatch::ProcessName("tclsh".to_string()),
    TargetMatch::ProcessName("tclsh8.6".to_string()),
    TargetMatch::ProcessName("testsolv".to_string()),
    TargetMatch::ProcessName("tic".to_string()),
    TargetMatch::ProcessName("tiff2bw".to_string()),
    TargetMatch::ProcessName("tiff2fsspec".to_string()),
    TargetMatch::ProcessName("tiff2pdf".to_string()),
    TargetMatch::ProcessName("tiff2ps".to_string()),
    TargetMatch::ProcessName("tiff2rgba".to_string()),
    TargetMatch::ProcessName("tiffcmp".to_string()),
    TargetMatch::ProcessName("tiffcomment".to_string()),
    TargetMatch::ProcessName("tiffcp".to_string()),
    TargetMatch::ProcessName("tiffcrop".to_string()),
    TargetMatch::ProcessName("tiffdither".to_string()),
    TargetMatch::ProcessName("tiffdump".to_string()),
    TargetMatch::ProcessName("tifffile".to_string()),
    TargetMatch::ProcessName("tiffinfo".to_string()),
    TargetMatch::ProcessName("tiffmedian".to_string()),
    TargetMatch::ProcessName("tiffset".to_string()),
    TargetMatch::ProcessName("tiffsplit".to_string()),
    TargetMatch::ProcessName("tificc".to_string()),
    TargetMatch::ProcessName("timezone-dump".to_string()),
    TargetMatch::ProcessName("tkconch".to_string()),
    TargetMatch::ProcessName("tldextract".to_string()),
    TargetMatch::ProcessName("toe".to_string()),
    TargetMatch::ProcessName("tput".to_string()),
    TargetMatch::ProcessName("tqdm".to_string()),
    TargetMatch::ProcessName("tracegen".to_string()),
    TargetMatch::ProcessName("transicc".to_string()),
    TargetMatch::ProcessName("trial".to_string()),
    TargetMatch::ProcessName("tset".to_string()),
    TargetMatch::ProcessName("ttx".to_string()),
    TargetMatch::ProcessName("twist".to_string()),
    TargetMatch::ProcessName("twistd".to_string()),
    TargetMatch::ProcessName("uic".to_string()),
    TargetMatch::ProcessName("undill".to_string()),
    TargetMatch::ProcessName("unidecode".to_string()),
    TargetMatch::ProcessName("unlz4".to_string()),
    TargetMatch::ProcessName("unlzma".to_string()),
    TargetMatch::ProcessName("unxz".to_string()),
    TargetMatch::ProcessName("unzstd".to_string()),
    TargetMatch::ProcessName("uuclient".to_string()),
    TargetMatch::ProcessName("validate-docstrings".to_string()),
    TargetMatch::ProcessName("volint".to_string()),
    TargetMatch::ProcessName("watchmedo".to_string()),
    TargetMatch::ProcessName("wcslint".to_string()),
    TargetMatch::ProcessName("wheel".to_string()),
    TargetMatch::ProcessName("wish".to_string()),
    TargetMatch::ProcessName("wish8.6".to_string()),
    TargetMatch::ProcessName("wrjpgcom".to_string()),
    TargetMatch::ProcessName("wsdump".to_string()),
    TargetMatch::ProcessName("x86_64-conda_cos7-linux-gnu-ld".to_string()),
    TargetMatch::ProcessName("x86_64-conda-linux-gnu-ld".to_string()),
    TargetMatch::ProcessName("xkbcli".to_string()),
    TargetMatch::ProcessName("xml2-config".to_string()),
    TargetMatch::ProcessName("xml2-config.bak".to_string()),
    TargetMatch::ProcessName("xmlcatalog".to_string()),
    TargetMatch::ProcessName("xmllint".to_string()),
    TargetMatch::ProcessName("xmlpatterns".to_string()),
    TargetMatch::ProcessName("xmlpatternsvalidator".to_string()),
    TargetMatch::ProcessName("xmlwf".to_string()),
    TargetMatch::ProcessName("xslt-config".to_string()),
    TargetMatch::ProcessName("xsltproc".to_string()),
    TargetMatch::ProcessName("xz".to_string()),
    TargetMatch::ProcessName("xzcat".to_string()),
    TargetMatch::ProcessName("xzcmp".to_string()),
    TargetMatch::ProcessName("xzdec".to_string()),
    TargetMatch::ProcessName("xzdiff".to_string()),
    TargetMatch::ProcessName("xzegrep".to_string()),
    TargetMatch::ProcessName("xzfgrep".to_string()),
    TargetMatch::ProcessName("xzgrep".to_string()),
    TargetMatch::ProcessName("xzless".to_string()),
    TargetMatch::ProcessName("xzmore".to_string()),
    TargetMatch::ProcessName("yapf".to_string()),
    TargetMatch::ProcessName("yapf-diff".to_string()),
    TargetMatch::ProcessName("zfp".to_string()),
    TargetMatch::ProcessName("zlib_decompress".to_string()),
    TargetMatch::ProcessName("zopfli".to_string()),
    TargetMatch::ProcessName("zopflipng".to_string()),
    TargetMatch::ProcessName("zstd".to_string()),
    TargetMatch::ProcessName("zstdcat".to_string()),
    TargetMatch::ProcessName("zstdgrep".to_string()),
    TargetMatch::ProcessName("zstdless".to_string()),
    TargetMatch::ProcessName("zstdmt".to_string()),
    ].to_vec();

pub static ref TARGETS: Vec<Target> = [
    Target::new(TargetMatch::ProcessName("python".to_string())),
    Target::new(TargetMatch::CommandContains(CommandContainsStruct {
        process_name: Some("java".to_string()),
        command_content: "uk.ac.babraham.FastQC.FastQCApplication".to_string()
    }))
    .set_display_name(Some("fastqc".to_string()))
    .set_merge_with_parents(true)
    .set_force_ancestor_to_match(false),
    Target::new(TargetMatch::BinPathStartsWith("/opt/conda/bin".to_string()))
        .set_filter_out(Some(OPT_CONDA_BIN_EXCEPTIONS.to_vec())),
    Target::new(TargetMatch::CommandContains(CommandContainsStruct {
        process_name: Some("bowtie2-build-s".to_string()),
        command_content: "/opt/conda/bin/bowtie2-build-s".to_string()
    }))
    .set_display_name(Some("bowtie2-build-s (Conda)".to_string())),
    Target::new(TargetMatch::ProcessName("STAR".to_string())),
    // bowtie section
    Target::new(TargetMatch::ProcessName("bowtie2".to_string())),
    Target::new(TargetMatch::ProcessName("bowtie2-build-s".to_string())),
    Target::new(TargetMatch::ProcessName("bowtie2-align-s".to_string())),
    Target::new(TargetMatch::ProcessName("bwa".to_string())),
    Target::new(TargetMatch::ProcessName("salmon".to_string())),
    Target::new(TargetMatch::ProcessName("hisat2".to_string())).set_display_name(Some("HISAT2".to_string())),
    Target::new(TargetMatch::ProcessName("hisat2-build".to_string())).set_display_name(Some("HISAT2_BUILD".to_string())),
    Target::new(TargetMatch::ProcessName("stringtie".to_string())),
    Target::new(TargetMatch::ProcessName("featureCounts".to_string())),
    Target::new(TargetMatch::ProcessName("HOMER".to_string())),
    Target::new(TargetMatch::ProcessName("samtools".to_string())),
    Target::new(TargetMatch::ProcessName("seasmoke".to_string())),
    Target::new(TargetMatch::ProcessName("alphafold".to_string())),
    Target::new(TargetMatch::ProcessName("bedtools".to_string())),
    Target::new(TargetMatch::ProcessName("deeptools".to_string())),
    Target::new(TargetMatch::ProcessName("macs3".to_string())),
    Target::new(TargetMatch::ProcessName("plotCoverage".to_string())),
    Target::new(TargetMatch::ProcessName("plotPCA".to_string())),
    Target::new(TargetMatch::ProcessName("plotFingerprint".to_string())),
    Target::new(TargetMatch::ProcessName("MACS33".to_string())),
    Target::new(TargetMatch::ProcessName("Genrich".to_string())),
    Target::new(TargetMatch::ProcessName("TopHat".to_string())),
    Target::new(TargetMatch::ProcessName("JAMM".to_string())),
    Target::new(TargetMatch::ProcessName("fastqc".to_string())),
    Target::new(TargetMatch::ShortLivedProcessExecutable(
        "fastqc".to_string()
    )),
    Target::new(TargetMatch::ProcessName("multiqc".to_string())),
    Target::new(TargetMatch::ProcessName("fastp".to_string())),
    Target::new(TargetMatch::ProcessName("PEAR".to_string())),
    Target::new(TargetMatch::ProcessName("Trimmomatic".to_string())),
    Target::new(TargetMatch::ProcessName("sra-toolkit".to_string())),
    Target::new(TargetMatch::ProcessName("Picard".to_string())),
    Target::new(TargetMatch::ProcessName("cutadapt".to_string())),
    Target::new(TargetMatch::ProcessName("cellranger".to_string())),
    Target::new(TargetMatch::ProcessName("STATsolo".to_string())),
    Target::new(TargetMatch::ProcessName("scTE".to_string())),
    Target::new(TargetMatch::ProcessName("scanpy".to_string())),
    Target::new(TargetMatch::ProcessName("Seurat".to_string())),
    Target::new(TargetMatch::ProcessName("LIGER".to_string())),
    Target::new(TargetMatch::ProcessName("SC3".to_string())),
    Target::new(TargetMatch::ProcessName("Louvain".to_string())),
    Target::new(TargetMatch::ProcessName("Leiden".to_string())),
    Target::new(TargetMatch::ProcessName("Garnett".to_string())),
    Target::new(TargetMatch::ProcessName("Monocle".to_string())),
    Target::new(TargetMatch::ProcessName("Harmony".to_string())),
    Target::new(TargetMatch::ProcessName("PAGA".to_string())),
    Target::new(TargetMatch::ProcessName("Palantir".to_string())),
    Target::new(TargetMatch::ProcessName("velocity".to_string())),
    Target::new(TargetMatch::ProcessName("CellPhoneDB".to_string())),
    Target::new(TargetMatch::ProcessName("CellChat".to_string())),
    Target::new(TargetMatch::ProcessName("NicheNet".to_string())),
    Target::new(TargetMatch::ProcessName("FIt-SNE".to_string())),
    Target::new(TargetMatch::ProcessName("umap".to_string())),
    Target::new(TargetMatch::ProcessName("bbmap".to_string())),
    Target::new(TargetMatch::ProcessName("cuffdiff".to_string())),
    Target::new(TargetMatch::ProcessName("RNA-SeQC".to_string())),
    Target::new(TargetMatch::ProcessName("RSeQC".to_string())),
    Target::new(TargetMatch::ProcessName("Trimgalore".to_string())),
    Target::new(TargetMatch::ProcessName("UCHIME".to_string())),
    Target::new(TargetMatch::ProcessName("Erange".to_string())),
    Target::new(TargetMatch::ProcessName("X-Mate".to_string())),
    Target::new(TargetMatch::ProcessName("SpliceSeq".to_string())),
    Target::new(TargetMatch::ProcessName("casper".to_string())),
    Target::new(TargetMatch::ProcessName("DESeq".to_string())),
    Target::new(TargetMatch::ProcessName("EdgeR".to_string())),
    Target::new(TargetMatch::ProcessName("bamSummary".to_string())),
    Target::new(TargetMatch::ProcessName("kallisto".to_string())),
    Target::new(TargetMatch::ProcessName("pairtools".to_string())),
    Target::new(TargetMatch::ProcessName("HiCExplorer".to_string())),
    Target::new(TargetMatch::ProcessName("GITAR".to_string())),
    Target::new(TargetMatch::ProcessName("TADbit".to_string())),
    Target::new(TargetMatch::ProcessName("Juicer".to_string())),
    Target::new(TargetMatch::ProcessName("HiC-Pro".to_string())),
    Target::new(TargetMatch::ProcessName("cooler".to_string())),
    Target::new(TargetMatch::ProcessName("cooltools".to_string())),
    Target::new(TargetMatch::ProcessName("runHiC".to_string())),
    Target::new(TargetMatch::ProcessName("HTSlib".to_string())),
    Target::new(TargetMatch::ProcessName("htslib".to_string())),
    Target::new(TargetMatch::ProcessName("zlib".to_string())),
    Target::new(TargetMatch::ProcessName("libbz2".to_string())),
    Target::new(TargetMatch::ProcessName("liblzma".to_string())),
    Target::new(TargetMatch::ProcessName("libcurl".to_string())),
    Target::new(TargetMatch::ProcessName("libdeflate".to_string())),
    Target::new(TargetMatch::ProcessName("ncurses".to_string())),
    Target::new(TargetMatch::ProcessName("pthread".to_string())),
]
.to_vec();

}
