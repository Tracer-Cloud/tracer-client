/* ========================================================================== */
/*                           GENERATED FILE                                   */
/* ========================================================================== */
/*                                                                            */
/*  This file is automatically generated from types.templ.rs                 */
/*  DO NOT EDIT MANUALLY - changes will be overwritten                        */
/*                                                                            */
/*  Generator: ebpf/typegen/typegen.rs                                        */
/*  Template:  ebpf/rs/types.templ.rs                                         */
/*  Config:    ebpf/typegen/events.toml                                       */
/*                                                                            */
/*  To regenerate: `cd tracer-client/src/ebpf/c && make` (fast)               */
/*  Alternative:   `cd tracer-client && cargo build` (slower)                 */
/*                                                                            */
/* ========================================================================== */

use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Copy, PartialEq, Eq, Serialize, Deserialize)]
#[repr(u32)]
pub enum EventType {
    SchedSchedProcessExec = 0,
    SchedSchedProcessExit = 1,
    SchedPsiMemstallEnter = 16,
    SyscallsSysEnterOpenat = 1024,
    SyscallsSysExitOpenat = 1025,
    SyscallsSysEnterRead = 1026,
    SyscallsSysEnterWrite = 1028,
    VmscanMmVmscanDirectReclaimBegin = 2048,
    OomMarkVictim = 3072,
}

// High-level event header (converted from C)
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EventHeader {
    pub event_id: u64,
    pub event_type: EventType,
    pub timestamp_ns: u64,
    pub pid: u32,
    pub ppid: u32,
    pub upid: u64,
    pub uppid: u64,
    pub comm: String,
}

// Combined event structure with header and typed payload
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Event {
    pub header: EventHeader,
    pub payload: EventPayload,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum EventPayload {
    Empty,
    SchedSchedProcessExec(SchedSchedProcessExecPayload),
    SchedSchedProcessExit(SchedSchedProcessExitPayload),
    SyscallsSysEnterOpenat(SyscallsSysEnterOpenatPayload),
    SyscallsSysExitOpenat(SyscallsSysExitOpenatPayload),
    SyscallsSysEnterRead(SyscallsSysEnterReadPayload),
    SyscallsSysEnterWrite(SyscallsSysEnterWritePayload),
    VmscanMmVmscanDirectReclaimBegin(VmscanMmVmscanDirectReclaimBeginPayload),
}

// Process execution (successful)
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SchedSchedProcessExecPayload {
    pub argv: Vec<String>,
}

// Process termination (successful)
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SchedSchedProcessExitPayload {
    pub exit_code: u32,
}

// File open, syscall entry
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SyscallsSysEnterOpenatPayload {
    pub dfd: u32,
    pub filename: String,
    pub flags: u32,
    pub mode: u32,
}

// File open, syscall return
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SyscallsSysExitOpenatPayload {
    pub fd: u32,
}

// Files and pipes, read syscall entry
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SyscallsSysEnterReadPayload {
    pub fd: u32,
    pub count: u64,
}

// Files and pipes, write syscall entry
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SyscallsSysEnterWritePayload {
    pub fd: u32,
    pub count: u64,
    pub content: String,
}

// Memory pressure, reclaim begins
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VmscanMmVmscanDirectReclaimBeginPayload {
    pub order: u32,
}


// Helper trait for converting from C representations
pub trait FromC<T> {
    fn from_c(value: T) -> Self;
}

impl From<u32> for EventType {
    fn from(value: u32) -> Self {
        match value {
            0 => EventType::SchedSchedProcessExec,
            1 => EventType::SchedSchedProcessExit,
            16 => EventType::SchedPsiMemstallEnter,
            1024 => EventType::SyscallsSysEnterOpenat,
            1025 => EventType::SyscallsSysExitOpenat,
            1026 => EventType::SyscallsSysEnterRead,
            1028 => EventType::SyscallsSysEnterWrite,
            2048 => EventType::VmscanMmVmscanDirectReclaimBegin,
            3072 => EventType::OomMarkVictim,
            _ => panic!("Unknown event type: {}", value),
        }
    }
}

impl EventType {
    pub fn as_str(&self) -> &'static str {
        match self {
            EventType::SchedSchedProcessExec => "sched/sched_process_exec",
            EventType::SchedSchedProcessExit => "sched/sched_process_exit",
            EventType::SchedPsiMemstallEnter => "sched/psi_memstall_enter",
            EventType::SyscallsSysEnterOpenat => "syscalls/sys_enter_openat",
            EventType::SyscallsSysExitOpenat => "syscalls/sys_exit_openat",
            EventType::SyscallsSysEnterRead => "syscalls/sys_enter_read",
            EventType::SyscallsSysEnterWrite => "syscalls/sys_enter_write",
            EventType::VmscanMmVmscanDirectReclaimBegin => "vmscan/mm_vmscan_direct_reclaim_begin",
            EventType::OomMarkVictim => "oom/mark_victim",
        }
    }
}
