diff --git a/src/extracts/src/process_watcher.rs b/src/extracts/src/process_watcher.rs
index 9b67ec6..67dd082 100644
--- a/src/extracts/src/process_watcher.rs
+++ b/src/extracts/src/process_watcher.rs
@@ -18,7 +18,7 @@ use tracer_common::types::event::attributes::process::{
 };
 use tracer_common::types::event::attributes::EventAttributes;
 use tracer_common::types::trigger::{FinishTrigger, ProcessTrigger, Trigger};
-use tracer_ebpf_user::{start_processing_events, TracerEbpf};
+use tracer_ebpf_libbpf::start_processing_events;
 use tracing::{debug, error};
 
 enum ProcessResult {
@@ -53,11 +53,13 @@ struct ProcessState {
     datasamples_tracker: HashMap<String, HashSet<String>>,
     // List of targets to watch
     targets: Vec<Target>,
+    // Store task handle to ensure it stays alive
+    ebpf_task: Option<tokio::task::JoinHandle<()>>,
 }
 
 /// Watches system processes and records events related to them
 pub struct ProcessWatcher {
-    ebpf: once_cell::sync::OnceCell<TracerEbpf>, // not tokio, because TracerEbpf is sync
+    ebpf: once_cell::sync::OnceCell<()>, // not tokio, because ebpf initialisation is sync
     log_recorder: LogRecorder,
     file_watcher: Arc<RwLock<FileWatcher>>,
     system: Arc<RwLock<System>>,
@@ -76,6 +78,7 @@ impl ProcessWatcher {
             monitoring: HashMap::new(),
             targets: targets.clone(),
             datasamples_tracker: HashMap::new(),
+            ebpf_task: None,
         }));
 
         ProcessWatcher {
@@ -101,31 +104,86 @@ impl ProcessWatcher {
         Ok(())
     }
 
-    fn initialize_ebpf(self: Arc<Self>) -> Result<TracerEbpf, anyhow::Error> {
-        let (tx, rx) = mpsc::channel::<Trigger>(100);
-        let ebpf = start_processing_events(tx.clone())?;
+    fn initialize_ebpf(self: Arc<Self>) -> Result<(), anyhow::Error> {
+        // Use unbounded channel for cross-runtime compatibility
+        let (tx, rx) = mpsc::unbounded_channel::<Trigger>();
 
+        // Start the eBPF event processing
+        if let Err(e) = start_processing_events(tx) {
+            return Err(e);
+        }
+
+        // Start the event processing loop
         let watcher = Arc::clone(&self);
-        tokio::spawn(async move {
-            watcher.process_trigger_loop(rx).await;
+        let task = tokio::spawn(async move {
+            if let Err(e) = watcher.process_trigger_loop(rx).await {
+                error!("process_trigger_loop failed: {:?}", e);
+            }
         });
 
-        Ok(ebpf)
+        // Store the task handle in the state if we can
+        match tokio::runtime::Handle::try_current() {
+            Ok(_) => {
+                tokio::spawn(async move {
+                    let mut state = self.state.write().await;
+                    state.ebpf_task = Some(task);
+                });
+            }
+            Err(_) => {
+                // Not in a tokio runtime, can't store the task handle
+            }
+        }
+
+        Ok(())
     }
 
     /// Main loop that processes triggers from eBPF
-    async fn process_trigger_loop(self: &Arc<Self>, mut rx: mpsc::Receiver<Trigger>) {
+    async fn process_trigger_loop(
+        self: &Arc<Self>,
+        mut rx: mpsc::UnboundedReceiver<Trigger>,
+    ) -> Result<()> {
         let mut buffer: Vec<Trigger> = Vec::with_capacity(100);
 
         loop {
             buffer.clear();
             debug!("Ready to receive triggers");
 
-            while rx.recv_many(&mut buffer, 100).await > 0 {
-                let triggers = std::mem::take(&mut buffer);
-                debug!("Received {:?}", triggers);
-                if let Err(e) = self.process_triggers(triggers).await {
-                    error!("Failed to process triggers: {}", e);
+            // Try to receive a single event with timeout to avoid blocking forever
+            match tokio::time::timeout(std::time::Duration::from_secs(5), rx.recv()).await {
+                Ok(Some(event)) => {
+                    buffer.push(event);
+
+                    // Try to receive more events non-blockingly (up to 99 more)
+                    let mut count = 1;
+                    while let Ok(Some(event)) =
+                        tokio::time::timeout(std::time::Duration::from_millis(10), rx.recv()).await
+                    {
+                        buffer.push(event);
+                        count += 1;
+                        if count >= 100 {
+                            break;
+                        }
+                    }
+
+                    // Process all events
+                    let triggers = std::mem::take(&mut buffer);
+                    println!(
+                        "process_trigger_loop: Processing {} triggers",
+                        triggers.len()
+                    );
+                    println!("Received {:?}", triggers);
+
+                    if let Err(e) = self.process_triggers(triggers).await {
+                        error!("Failed to process triggers: {}", e);
+                    }
+                }
+                Ok(None) => {
+                    error!("Event channel closed, exiting process loop");
+                    return Ok(());
+                }
+                Err(_) => {
+                    // Timeout occurred, just continue the loop
+                    continue;
                 }
             }
         }
@@ -136,11 +194,23 @@ impl ProcessWatcher {
         let mut start_triggers: Vec<ProcessTrigger> = vec![];
         let mut finish_triggers: Vec<FinishTrigger> = vec![];
 
+        // Add debug logging
+        debug!("ProcessWatcher: processing {} triggers", triggers.len());
+
         // Separate start and finish triggers
         for trigger in triggers.into_iter() {
             match trigger {
-                Trigger::Start(proc) => start_triggers.push(proc),
-                Trigger::Finish(proc) => finish_triggers.push(proc),
+                Trigger::Start(proc) => {
+                    debug!(
+                        "ProcessWatcher: received START trigger pid={}, cmd={}",
+                        proc.pid, proc.comm
+                    );
+                    start_triggers.push(proc);
+                }
+                Trigger::Finish(proc) => {
+                    debug!("ProcessWatcher: received FINISH trigger pid={}", proc.pid);
+                    finish_triggers.push(proc);
+                }
             }
         }
 
